name: Release

on:
  push:
    branches:
      - release/**

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - id: extract
        name: Extract branch info
        uses: actions/github-script@v6
        with:
          script: |
            const { GITHUB_REF, GITHUB_REPOSITORY } = process.env
            console.log("ref", GITHUB_REF)
            const matches = new RegExp("refs/heads/release/(latest/)?(v[0-9]+\.[0-9]+\.[0-9]+(?:-RC[0-9]+)?)", "g").exec(GITHUB_REF)
            console.log("matches", matches)
            if (matches == null || matches[2] === undefined) {
              core.error('looks like a wrong version was defined, did not match vx.y.z => ' + GITHUB_REF)
            }
            const version = matches[2]
            const isLatest = matches[1] !== undefined

            core.setOutput('version', version)
            core.setOutput('isLatest', isLatest)

            const nextVersion = new RegExp("v([0-9]+)\.([0-9]+)").exec(version)
            core.setOutput('nextVersion', 'v' + nextVersion[1] + '.' + (parseInt(nextVersion[2], 10) + 1) + '.0-SNAPSHOT')

      - uses: actions/checkout@v2

      - name: check for TODOs
        uses: tegonal/workflow-helper@v0.3.0
        with:
          commands: 'todo-checker -d "${GITHUB_WORKSPACE}" -i "${{ steps.extract.outputs.version }}"'

      - name: configure git
        run: |
          CONFIG=$(cat << EOM
          [user]
              name="${GITHUB_ACTOR}"
              email="${GITHUB_ACTOR}@users.noreply.github.com"
          EOM
          )
          echo "$CONFIG" >> .git/config


      - name: Prepare Release
        run: |
          ./scripts/prepare-release.sh "${{ steps.extract.outputs.version }}"

      - name: push prepared changes
        run: git push

      - name: git tag
        run: |
          git tag "${{ steps.extract.outputs.version }}"
          git push origin "${{ steps.extract.outputs.version }}"

      - name: prepare next dev
        if: steps.extract.outputs.isLatest
        run: |
          ./scripts/prepare-next-dev-cycle.sh "${{ steps.extract.outputs.nextVersion }}"
          sbt test
          git fetch origin main
          git checkout -b main origin/main
          git merge -m "Merge ${{ env.version }} back to main" "$GITHUB_REF"
          git push origin -d "$GITHUB_REF"
          git push
